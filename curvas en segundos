import os
import numpy as np
import rasterio
from shapely.geometry import LineString
import geopandas as gpd
import matplotlib.pyplot as plt
import dask.array as da

# Ruta del archivo raster y gdf de salida
raster_path = r"C:\Users\Janus\Downloads\Download-dem-using-API-extract-contour-lines-from-a-DEM-and-generate-DEM-from-curves-main\Download-dem-using-API-extract-contour-lines-from-a-DEM-and-generate-DEM-from-curves-main\Barranquilla_DEMa.tif"
output_path = r"C:\Users\Janus\Downloads\curvas_de_nivel_Barranquilla1.shp"

# Parámetros para las curvas de nivel
contour_interval = 1

# Leer el archivo raster con dask para procesamiento paralelo
print("Leyendo el raster...")
with rasterio.open(raster_path) as src:
    raster_data = src.read(1)  # Leer la banda de elevación
    transform = src.transform  # Transformación para coordenadas
    nodata = src.nodata  # Valor nodata del raster
    crs = src.crs  # Sistema de coordenadas
    
    # Convertir a array dask para procesamiento paralelo
    raster_data = da.from_array(raster_data, chunks=(1024, 1024))

    # Reemplazar valores nodata por NaN
    if nodata is not None:
        raster_data = da.where(raster_data == nodata, np.nan, raster_data)

# Verificar estadísticas en paralelo
min_elev = da.nanmin(raster_data).compute()
max_elev = da.nanmax(raster_data).compute()
print(f"Estadísticas del raster: Min={min_elev}, Max={max_elev}")

# Crear una cuadrícula de coordenadas
print("Generando coordenadas...")
height, width = raster_data.shape
x_coords = np.arange(width)
y_coords = np.arange(height)
x_world, y_world = np.meshgrid(
    np.linspace(0, width - 1, width),
    np.linspace(0, height - 1, height)
)
x_world, y_world = rasterio.transform.xy(transform, y_world, x_world, offset="center")
x_world = np.array(x_world)
y_world = np.array(y_world)

# Generar los contornos con matplotlib
print("Generando curvas de nivel...")
levels = np.arange(min_elev, max_elev + contour_interval, contour_interval)
contour_set = plt.contour(x_world, y_world, raster_data.compute(), levels=levels)

# Extraer las curvas como geometrías con sus elevaciones
print("Extrayendo geometrías de las curvas...")
contour_lines = []
contour_elevations = []

# Límites del cuadro (calculando las coordenadas de las esquinas)
xmin, ymin = rasterio.transform.xy(transform, 0, 0)  # Esquina inferior izquierda
xmax, ymax = rasterio.transform.xy(transform, height-1, width-1)  # Esquina superior derecha

# Función para verificar intersección con líneas anteriores
def check_intersection(new_line, existing_lines):
    for line in existing_lines:
        if new_line.intersects(line):
            return True  # Si intersecta con alguna línea, devolver True
    return False  # Si no intersecta con ninguna, devolver False

# Iterar sobre los contornos y extraer los niveles de elevación
for level, collection in zip(contour_set.levels, contour_set.collections):
    for path in collection.get_paths():
        for coords in path.to_polygons():
            if len(coords) > 1:  # Evitar geometrías vacías
                coords_array = np.array(coords)  # Convertir a un array de numpy

                # Verificar si la línea cruza los bordes
                if (
                    np.any(coords_array[:, 0] == xmin) or
                    np.any(coords_array[:, 0] == xmax) or
                    np.any(coords_array[:, 1] == ymin) or
                    np.any(coords_array[:, 1] == ymax)
                ):
                    # Mantener la línea abierta en los bordes
                    line = LineString(coords_array[:-1])  # Eliminamos el último punto (en el borde)
                else:
                    line = LineString(coords_array)

                # Verificar intersección con líneas anteriores
                if not check_intersection(line, contour_lines):
                    contour_lines.append(line)
                    contour_elevations.append(level)  # Asociar el nivel actual a la geometría

# Crear un GeoDataFrame con las curvas de nivel
print("Creando GeoDataFrame...")
gdf = gpd.GeoDataFrame(
    {'elevation': contour_elevations, 'geometry': contour_lines},
    crs=crs.to_wkt()
)

# Exportar el GeoDataFrame como shapefile
print(f"Guardando curvas de nivel en {output_path}...")
gdf.to_file(output_path, driver="ESRI Shapefile")
print("Proceso completado.")
